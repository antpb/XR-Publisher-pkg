import type { ISkin } from './skins/ISkin.js';
import { vec3, quat } from 'gl-matrix';
import Transform from '../maths/Transform';
import Bone from './Bone';
import Pose from './Pose';
declare class Armature {
    names: Map<string, number>;
    bones: Array<Bone>;
    skin?: ISkin;
    offset: Transform;
    addBone(name: string, pidx?: number, rot?: quat, pos?: vec3, scl?: vec3): Bone;
    bind(skin?: new () => ISkin, defaultBoneLen?: number): this;
    clone(): Armature;
    newPose(doWorldUpdate?: boolean): Pose;
    getBone(bName: string): Bone | null;
    getSkinOffsets(): Array<unknown> | null;
    updateSkinFromPose(pose: Pose): Array<unknown> | null;
    updateWorld(): this;
    updateBoneLengths(defaultBoneLen?: number): this;
}
export default Armature;
