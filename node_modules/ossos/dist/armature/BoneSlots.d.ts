import type Armature from './Armature';
import type Pose from './Pose';
import type Bone from './Bone';
import { vec3, quat } from 'gl-matrix';
/** Hold Object Reference along with an offset transform */
declare class SlotItem {
    obj: any;
    offsetPos?: vec3;
    offsetRot?: quat;
    offsetScl?: vec3;
}
declare class Slot {
    name: string;
    boneName: string;
    boneIdx: number;
    items: Array<SlotItem>;
    invBindRot: quat;
    constructor(name: string, bone: Bone);
}
declare class BoneSlots {
    arm: Armature;
    slots: Map<string, Slot>;
    onAttachmentUpdate?: (obj: any, rot: quat, pos: vec3, scl: vec3) => void;
    constructor(arm: Armature);
    add(slotName: string, boneName: string): this;
    attach(slotName: string, obj: any, offsetRot?: quat, offsetPos?: vec3, offsetScl?: vec3): this;
    updateFromPose(pose: Pose): this;
    /** Get All Slotted Objects */
    getAllObjects(): Array<any>;
}
export default BoneSlots;
