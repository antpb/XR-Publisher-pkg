import type { Pose as GLPose } from '../parsers/gltf2/Pose';
import type Armature from './Armature.js';
import type Bone from './Bone.js';
import { vec3, quat } from 'gl-matrix';
import Transform from '../maths/Transform';
declare class Pose {
    arm: Armature;
    bones: Bone[];
    offset: Transform;
    constructor(arm?: Armature);
    /** Get Bone by Name */
    get(bName: string): Bone | null;
    clone(): Pose;
    setLocalPos(bone: number | string, v: vec3): this;
    setLocalRot(bone: number | string, v: quat): this;
    fromGLTF2(glPose: GLPose): this;
    copy(pose: Pose): this;
    rotLocal(bone: number | string, deg: number, axis?: string): this;
    rotWorld(bone: number | string, deg: number, axis?: string): this;
    /** Add Offset movement to local space position */
    moveLocal(bone: number | string, offset: vec3): this;
    sclLocal(bone: number | string, v: number | vec3): this;
    updateWorld(useOffset?: boolean): this;
    getWorldTransform(bIdx: number, out?: Transform): Transform;
    getWorldRotation(bIdx: number, out?: quat): quat;
    updateBoneLengths(defaultBoneLen?: number): this;
}
export default Pose;
