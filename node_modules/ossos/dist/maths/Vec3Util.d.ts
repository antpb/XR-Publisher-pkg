import type { vec3 } from 'gl-matrix';
export declare type TVec3Struct = {
    x: number;
    y: number;
    z: number;
};
declare class Vec3Util {
    static len(a: vec3, b: vec3): number;
    static lenSqr(a: vec3, b: vec3): number;
    static isZero(v: vec3): boolean;
    /** When values are very small, like less then 0.000001, just make it zero */
    static nearZero(out: vec3, v: vec3): vec3;
    /** Used to get data from a flat buffer */
    static fromBuf(out: vec3, ary: Array<number> | Float32Array, idx: number): vec3;
    /** Put data into a flat buffer */
    static toBuf(v: vec3, ary: Array<number> | Float32Array, idx: number): Vec3Util;
    static toStruct(v: vec3, o?: TVec3Struct): TVec3Struct;
    static fromStruct(v: vec3, o: TVec3Struct): vec3;
    static toArray(v: vec3): number[];
}
export default Vec3Util;
