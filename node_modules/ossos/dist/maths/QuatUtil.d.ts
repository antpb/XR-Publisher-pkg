import { quat, vec3 } from 'gl-matrix';
declare class QuatUtil {
    /** Used to get data from a flat buffer */
    static fromBuf(out: quat, ary: Array<number> | Float32Array, idx: number): quat;
    /** Put data into a flat buffer */
    static toBuf(q: quat, ary: Array<number> | Float32Array, idx: number): QuatUtil;
    static lenSqr(a: quat, b: quat): number;
    static isZero(q: quat): boolean;
    static negate(out: quat, q?: quat): quat;
    /** Checks if on opposite hemisphere, if so, negate change quat */
    static dotNegate(out: quat, chg: quat, chk: quat): quat;
    /** PreMultiple an Axis Angle to this quaternions */
    static pmulAxisAngle(out: quat, axis: vec3, angle: number, q: quat): quat;
    /** Inverts the quaternion passed in, then pre multiplies to this quaternion. */
    static pmulInvert(out: quat, q: quat, qinv: quat): quat;
    static nblend(out: quat, a: quat, b: quat, t: number): quat;
}
export default QuatUtil;
