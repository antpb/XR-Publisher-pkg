import type Armature from '../armature/Armature';
import type Pose from '../armature/Pose';
import SpringChain from './SpringChain';
interface ISpringType {
    setRestPose(chain: SpringChain, pose: Pose, resetSpring: boolean, debug?: any): void;
    updatePose(chain: SpringChain, pose: Pose, dt: number, debug?: any): void;
}
declare class BoneSpring {
    arm: Armature;
    items: Map<string, SpringChain>;
    constructor(arm: Armature);
    addRotChain(chName: string, bNames: string[], osc?: number, damp?: number): this;
    addPosChain(chName: string, bNames: string[], osc?: number, damp?: number): this;
    setRestPose(pose: Pose, resetSpring?: boolean, debug?: any): this;
    updatePose(dt: number, pose: Pose, doWorldUpdate: false, debug?: any): this;
    /** Set Oscillation Per Section for all Chain Items */
    setOsc(chName: string, osc: number): this;
    /** Spread a Oscillation range on the chain */
    setOscRange(chName: string, a: number, b: number): this;
    setDamp(chName: string, damp: number): this;
    setDampRange(chName: string, a: number, b: number): this;
}
export default BoneSpring;
export type { ISpringType };
