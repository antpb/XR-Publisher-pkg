import type Pose from '../../armature/Pose';
import type { IKChain } from "../rigs/IKChain";
import type { ISolver } from './support/ISolver';
import { vec3 } from 'gl-matrix';
declare class FabrikSolver implements ISolver {
    maxIteration: number;
    effectorPos: vec3;
    effectorFwd: vec3;
    _inWorldSpace: boolean;
    _threshold: number;
    _bonePos: Array<vec3>;
    _radLimit: number;
    _dotLimit: number;
    _radLimit2: number;
    _dotLimit2: number;
    initData(pose?: Pose, chain?: IKChain): this;
    setTargetPos(v: vec3): this;
    setTargetFwd(v: vec3): this;
    inWorldSpace(): this;
    resolve(chain: IKChain, pose: Pose, debug?: any): void;
    _preProcess(chain: IKChain, pose: Pose, debug?: any): void;
    _update_fromWorldPose(chain: IKChain, pose: Pose, debug?: any): void;
    _update_fromBindPose(chain: IKChain, pose: Pose, debug?: any): void;
    _applyAngleConstraint(fromDir: vec3, toDir: vec3, t: number): void;
    _iterateBackward(chain: IKChain, debug?: any): void;
    _iterateForward(chain: IKChain, debug?: any): void;
}
export default FabrikSolver;
