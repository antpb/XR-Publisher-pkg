import type Pose from '../../armature/Pose';
import type { IKChain } from "../rigs/IKChain";
import type { ISolver } from './support/ISolver';
import { Transform } from '../../maths';
import { vec3 } from 'gl-matrix';
declare class NaturalCCDSolver implements ISolver {
    effectorPos: vec3;
    _inWorldSpace: boolean;
    _tries: number;
    _minEffRng: number;
    _chainCnt: number;
    _local: Transform[];
    _world: Transform[];
    _kFactor: any;
    initData(pose?: Pose, chain?: IKChain): this;
    setTargetPos(v: vec3): this;
    useArcSqrFactor(c: number, offset: number, useInv?: boolean): this;
    inWorldSpace(): this;
    setTries(v: number): this;
    resolve(chain: IKChain, pose: Pose, debug?: any): void;
    _updateWorld(startIdx: number, root: Transform): void;
    _getTailPos(): vec3;
    _iteration(chain: IKChain, pose: Pose, root: Transform, debug?: any): boolean;
}
export default NaturalCCDSolver;
